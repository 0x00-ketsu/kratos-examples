// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: proto/api/health/v1/health.proto

package healthv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHealthServiceCheck = "/health.v1.HealthService/Check"
const OperationHealthServiceProbe = "/health.v1.HealthService/Probe"

type HealthServiceHTTPServer interface {
	Check(context.Context, *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error)
	Probe(context.Context, *emptypb.Empty) (*ProbeResponse, error)
}

func RegisterHealthServiceHTTPServer(s *http.Server, srv HealthServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/health/liveness", _HealthService_Probe0_HTTP_Handler(srv))
	r.GET("/v1/health/readiness", _HealthService_Check0_HTTP_Handler(srv))
}

func _HealthService_Probe0_HTTP_Handler(srv HealthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthServiceProbe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Probe(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProbeResponse)
		return ctx.Result(200, reply)
	}
}

func _HealthService_Check0_HTTP_Handler(srv HealthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in grpc_health_v1.HealthCheckRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthServiceCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*grpc_health_v1.HealthCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*grpc_health_v1.HealthCheckResponse)
		return ctx.Result(200, reply)
	}
}

type HealthServiceHTTPClient interface {
	Check(ctx context.Context, req *grpc_health_v1.HealthCheckRequest, opts ...http.CallOption) (rsp *grpc_health_v1.HealthCheckResponse, err error)
	Probe(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ProbeResponse, err error)
}

type HealthServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewHealthServiceHTTPClient(client *http.Client) HealthServiceHTTPClient {
	return &HealthServiceHTTPClientImpl{client}
}

func (c *HealthServiceHTTPClientImpl) Check(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...http.CallOption) (*grpc_health_v1.HealthCheckResponse, error) {
	var out grpc_health_v1.HealthCheckResponse
	pattern := "/v1/health/readiness"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthServiceCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HealthServiceHTTPClientImpl) Probe(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ProbeResponse, error) {
	var out ProbeResponse
	pattern := "/v1/health/liveness"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthServiceProbe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
