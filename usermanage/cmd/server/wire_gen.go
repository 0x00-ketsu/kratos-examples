// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"usermanage/gen/proto/conf"
	"usermanage/internal/biz"
	"usermanage/internal/data"
	"usermanage/internal/pkg/db"
	"usermanage/internal/server"
	"usermanage/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireData init data.
func wireData(confData *conf.Data, logger log.Logger) (*data.Data, error) {
	database, err := db.NewDatabase(confData)
	if err != nil {
		return nil, err
	}
	universalClient, err := db.NewRedis(confData)
	if err != nil {
		return nil, err
	}
	dataData, err := data.NewData(database, universalClient, logger)
	if err != nil {
		return nil, err
	}
	return dataData, nil
}

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, error) {
	database, err := db.NewDatabase(confData)
	if err != nil {
		return nil, err
	}
	universalClient, err := db.NewRedis(confData)
	if err != nil {
		return nil, err
	}
	healthUseCase := biz.NewHealthUseCase(database, universalClient)
	healthService := service.NewHealthService(healthUseCase, logger)
	userRepo := data.NewUserRepo(database, logger)
	tokenRepo := data.NewRedisTokenRepo(universalClient, logger)
	userUseCase := biz.NewUserUseCase(userRepo, tokenRepo)
	userService := service.NewUserService(userUseCase, logger)
	authUseCase := biz.NewAuthUseCase(userRepo, tokenRepo)
	authService := service.NewAuthService(authUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, healthService, userService, authService, authUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, healthService, userService, authService, authUseCase, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, nil
}
